import org.gradle.api.plugins.quality.FindBugs
import org.gradle.api.plugins.quality.Pmd
import org.gradle.api.tasks.GradleBuild
import org.gradle.api.tasks.bundling.Jar
import org.gradle.api.tasks.bundling.Zip
import org.gradle.logging.StyledTextOutputFactory
import org.gradle.logging.StyledTextOutput.Style
import org.gradle.plugins.ide.eclipse.model.AbstractLibrary
import org.gradle.plugins.ide.eclipse.model.Classpath
import org.gradle.plugins.ide.eclipse.model.ClasspathEntry
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory


apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'findbugs'

repositories {  flatDir { dirs 'lib'
    }  }

dependencies {
    compile gradleApi()
    groovy localGroovy()
    compile fileTree(dir: 'lib', include: '*.jar', exclude: '*-sources.jar')
}

version = "1.0.0"
ext.jdtInputFile = "eclipseJdt/org.eclipse.jdt.core.prefs"
ext.pmdSettingsFile = "pmd/.pmd"

project.tasks.withType(Pmd) {
    doFirst {
        project.copy {
            from project.file(pmdSettingsFile)
            into project.projectDir
        }
        println "Pmd template file copied for project '${project.name}'"
    }
}
project.pmd.ruleSetFiles = project.files(".pmd")
project.pmd.ignoreFailures = 'false'


project.tasks.withType(FindBugs) { ignoreFailures = false }

[
    project.findbugsMain,
    project.findbugsTest
]*.reports {
    xml.enabled false
    html.enabled true
}


project.eclipse.classpath.defaultOutputDir = file('target/classes')

project.ext.junitLib='junit-4.10'

project.eclipse {
    classpath {
        file {
            whenMerged { Classpath cp ->
                String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
                String gradleSrc = "${gradleHome}/src"
                def entrySourcePath = new FileReferenceFactory().fromPath(gradleSrc)
                def outputFactory = services.get(StyledTextOutputFactory).create("gradlePlugins.eclipseClasspath")
                cp.entries.each { ClasspathEntry entry ->
                    if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
                        entry.sourcePath = entrySourcePath
                        outputFactory.withStyle(Style.Info).println("Forked source path for ${entry}")
                    }
                    if( (entry in AbstractLibrary) && (entry.library.file.name.startsWith("${junitLib}")) ) {
                        entry.sourcePath = new FileReferenceFactory().fromPath("${projectDir}/lib-sources/${junitLib}-src.jar")
                    }
                }
            }
        }
    }
}

project.eclipseJdt {
    inputFile=project.file(jdtInputFile)
    doLast { println "Forked eclipseJdt.inputFile from ${jdtInputFile}." }
}

project.task("sourcesJar", type: Jar, dependsOn:"classes") {
    group = 'Distribution'
    description = "Makes the project specific sourceJar."
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

project.task('distribution', type: Zip) { Zip task ->
    group = 'Distribution'
    description = "Makes the project distribution archive containing jar and sources jar."
    task.dependsOn("jar")
    task.dependsOn("sourcesJar")
    task.from project.jar
    task.from project.sourcesJar
    //task.from project.configurations.runtime
}

project.task("release", type: GradleBuild) { GradleBuild task ->
    //task.dependsOn "refreshBuildFileGenerator"
    group = 'Build'
    task.buildFile = 'build.gradle'
    description = 'Runs tests,jar and sourceJar targets.'
    task.tasks << 'test'
    task.tasks << 'distribution'
}

project.task('runtimeDistribution', type: Zip) { Zip task ->
    group = 'Distribution'
    description = "Makes the project runtime distribution archive."
    task.dependsOn("jar")
    task.from project.jar
    task.from project.configurations.runtime
    task.exclude 'junit-4.10.jar'
}

project.artifacts {
    archives project.distribution
    archives project.sourcesJar
}
